geom_line(aes(y = probit, color = "Probit Link"), linetype = "dashed", size = 1.2) +
labs(x = "Probability (p)", y = "Transformed Value",
title = "Comparison of Logit and Probit Link Functions") +
theme_minimal() +
scale_color_manual(name = "Link Function", values = c("Logit Link" = "black", "Probit Link" = "gray"))
# Load required package
library(ggplot2)
# Create a data frame
p <- seq(0.001, 0.999, length.out = 500)
logit <- log(p / (1 - p))
probit <- qnorm(p)
df <- data.frame(
p = p,
logit = logit,
probit = probit
)
# Plot
ggplot(df, aes(x = p)) +
geom_line(aes(y = logit, color = "Logit Link"), size = 1.2) +
geom_line(aes(y = probit, color = "Probit Link"), linetype = "dashed", size = 1.2) +
labs(x = "Probability (p)", y = "Transformed Value",
title = "Comparison of Logit and Probit Link Functions") +
theme_minimal() +
scale_color_manual(name = "Link Function", values = c("Logit Link" = "black", "Probit Link" = "gray"))
# OPTIONS -----------------------------------------------
knitr::opts_chunk$set(echo = TRUE,
warning=FALSE,
message = FALSE)
# PACKAGES-----------------------------------------------
# Tutorial packages
library(vembedr)
library(skimr)
library(yarrr)
library(RColorBrewer)
library(GGally)
library(tidyverse)
library(plotly)
library(readxl)
library(rvest)
library(biscale)
library(tidycensus)
library(cowplot)
library(units)
library(olsrr)
library(ggstatsplot)
library(DALEX)
library(ggplot2)
data("titanic", package = "DALEX")
# Load required package
library(ggplot2)
# Create a data frame
p <- seq(0.001, 0.999, length.out = 500)
logit <- log(p / (1 - p))
probit <- qnorm(p)
df <- data.frame(
p = p,
logit = logit,
probit = probit
)
# Plot
ggplot(df, aes(x = p)) +
geom_line(aes(y = logit, color = "Logit Link"), size = 1.2) +
geom_line(aes(y = probit, color = "Probit Link"), linetype = "dashed", size = 1.2) +
labs(x = "Probability (p)", y = "Transformed Value",
title = "Comparison of Logit and Probit Link Functions") +
theme_minimal() +
scale_color_manual(name = "Link Function", values = c("Logit Link" = "black", "Probit Link" = "gray"))
data("titanic", package = "DALEX")
ship_survival <- titanic
# I'm going to force the response to be a factor
ship_survival$survived <- as.factor(titanic$survived)
skim(ship_survival)
ship_survival <- ship_survival[which(ship_survival$fare > 0),]
ship_survival <- ship_survival[which(ship_survival$age > 21),]
ship_survival <- ship_survival[which(ship_survival$fare < 300),]
ggplot(ship_survival, aes(x = survived, y = fare)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size=.7,alpha=.5,color="blue") +
coord_flip()
ggbetweenstats(ship_survival,y=fare,x=survived,
results.subtitle=FALSE)
#survived is the column name of my y variable, fare is the column name of my x variable and the dataset is ship_survival
model_logit <- glm(survived ~ fare,
family = binomial(link = "logit"),
data = ship_survival)
summary(model_logit)
library(blsrr)
library(blorr)
# remember to add this to your library list
# at the top of your reports
library(blorr)
blr_regress(model_logit)
0.01311*0.00185
?ggbetweenstats
# OPTIONS -----------------------------------------------
knitr::opts_chunk$set(echo = TRUE,
warning=FALSE,
message = FALSE)
# PACKAGES-----------------------------------------------
# Tutorial packages
library(vembedr)
library(skimr)
library(yarrr)
library(RColorBrewer)
library(GGally)
library(tidyverse)
library(plotly)
library(readxl)
library(rvest)
library(biscale)
library(tidycensus)
library(cowplot)
library(units)
library(olsrr)
library(ggstatsplot)
library(DALEX)
library(ggplot2)
data("titanic", package = "DALEX")
# Load required package
library(ggplot2)
# Create a data frame
p <- seq(0.001, 0.999, length.out = 500)
logit <- log(p / (1 - p))
probit <- qnorm(p)
df <- data.frame(
p = p,
logit = logit,
probit = probit
)
# Plot
ggplot(df, aes(x = p)) +
geom_line(aes(y = logit, color = "Logit Link"), size = 1.2) +
geom_line(aes(y = probit, color = "Probit Link"), linetype = "dashed", size = 1.2) +
labs(x = "Probability (p)", y = "Transformed Value",
title = "Comparison of Logit and Probit Link Functions") +
theme_minimal() +
scale_color_manual(name = "Link Function", values = c("Logit Link" = "black", "Probit Link" = "gray"))
library(DALEX)
# Load data
data("titanic", package = "DALEX")
ship_survival <- titanic
# Make sure survival is a factor (binary outcome)
ship_survival$survived <- as.factor(ship_survival$survived)
# Remove staff (fare == 0) and children (age <= 21) and millionaires
ship_survival <- ship_survival[which(ship_survival$fare > 0 &
ship_survival$age > 21 &
ship_survival$fare < 300),]
# Quick look at the data
summary(ship_survival)
library(ggplot2)
# Boxplot with jittered points
ggplot(ship_survival, aes(x = survived, y = fare)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 0.7, alpha = 0.5, color = "blue") +
coord_flip()
library(ggstatsplot)
ggbetweenstats(data = ship_survival, y = fare,
x = survived,
results.subtitle = FALSE,
centrality.plotting = FALSE,
point.args = list(size = 2))
library(ggplot2)
# Boxplot with jittered points
ggplot(ship_survival, aes(x = survived, y = fare)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 0.5, alpha = 0.5, color = "blue") +
coord_flip()
library(ggplot2)
# Boxplot with jittered points
ggplot(ship_survival, aes(x = survived, y = fare)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 0.5, alpha = 0.5, color = "survived") +
coord_flip()
library(ggplot2)
# Boxplot with jittered points
ggplot(ship_survival, aes(x = survived, y = fare)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 0.5, alpha = 0.5, color = survived) +
coord_flip()
library(ggplot2)
# Boxplot with jittered points
ggplot(ship_survival, aes(x = survived, y = fare)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 0.5, alpha = 0.5, color = "blue") +
coord_flip()
model_logit <- glm(survived ~ fare,
family = binomial(link = "logit"),
data = ship_survival)
summary(model_logit)
cbind(Coefficient_logodds = coef(model_logit), confint(model_logit))
?
confint
cbind(Coefficient_logodds = coef(model_logit), confint(model_logit,level = 0.95))
cbind(Coefficient_Odds = exp(coef(model_logit)), exp(confint(model_logit))))
cbind(Coefficient_Odds = exp(coef(model_logit)), exp(confint(model_logit)))
predict(model_logit, newdata = data.frame(fare = 50), type = "response")
round((exp(coef(model_logit)[2]) - 1) * 100, 2)
ship_survival$modelled_logodds    <- predict(model_logit, type = "link")
ship_survival$modelled_odds       <- exp(predict(model_logit, type = "link"))
ship_survival$modelled_probability <- predict(model_logit, type = "response")
ship_survival <- subset(ship_survival, fare > 0 & age > 21 & fare < 300)
data("titanic", package = "DALEX")
ship_survival <- titanic
ship_survival <- subset(ship_survival, fare > 0 & age > 21 & fare < 300)
View(ship_survival)
# OPTIONS -----------------------------------------------
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE)#data("titanic", package = "DALEX")
# PACKAGES-----------------------------------------------
library(DALEX)
library(ggplot2)
library(blorr)
library(arm)
library(ggstatsplot)
# Plotting logit vs probit
p <- seq(0.001, 0.999, length.out = 500)
logit <- log(p / (1 - p))
probit <- qnorm(p)
df <- data.frame(
p = p,
logit = logit,
probit = probit
)
ggplot(df, aes(x = p)) +
geom_line(aes(y = logit, color = "Logit Link"), size = 1.2) +
geom_line(aes(y = probit, color = "Probit Link"), linetype = "dashed", size = 1.2) +
labs(x = "Probability (p)", y = "Transformed Value",
title = "Comparison of Logit and Probit Link Functions") +
theme_minimal() +
scale_color_manual(name = "Link Function", values = c("Logit Link" = "black", "Probit Link" = "gray"))
# Load data
library(DALEX)
data("titanic", package = "DALEX")
ship_survival <- subset(titanic, fare > 0 & age > 21 & fare < 300)
ship_survival$survived <- as.factor(ship_survival$survived)
# Quick look at the data
summary(ship_survival)
# Boxplot with jittered points
ggplot(ship_survival, aes(x = survived, y = fare)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 0.5, alpha = 0.5, color = "blue") +
coord_flip()
library(ggstatsplot)
ggbetweenstats(data = ship_survival, y = fare, x = survived,
results.subtitle = FALSE, centrality.plotting = FALSE,
point.args = list(size = 2))
model_logit <- glm(survived ~ fare,
family = binomial(link = "logit"),
data = ship_survival)
summary(model_logit)
cbind(Coefficient_logodds = coef(model_logit), confint(model_logit, level = 0.95))
cbind(Coefficient_Odds = exp(coef(model_logit)), exp(confint(model_logit)))
round((exp(coef(model_logit)[2]) - 1) * 100, 2)
?blr_pseudo_rsq
blorr::blr_rsq_count()
blorr::blr_rsq_count(model_logit)
# OPTIONS -----------------------------------------------
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE)
data("titanic", package = "DALEX")
blr_model_fit_stats(model_logit)
knitr::opts_chunk$set(eval = TRUE,
results = FALSE,
fig.show = "hide",
message = FALSE,
warning = FALSE)
library(openintro)
library(tidyverse)
library(broom)
library(AER)
library(readxl)
birth <- read_excel("BirthWeight.xlsx")
summary(birth)
ship_survival$type_num <- ifelse(ship_survival$survived == "yes", 1, 0)
ggplot(ship_survival, aes(fare, type_num)) +
geom_point(alpha = 0.5, size = 0.5) +
stat_smooth(aes(y = modelled_probability), se = FALSE, lwd = 0.5) +
labs(y = "Probability of survival", title = "Probability of surviving Titanic based on fare paid")
# OPTIONS -----------------------------------------------
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE)
data("titanic", package = "DALEX")
# PACKAGES-----------------------------------------------
library(DALEX) # for the Titanic data
library(ggplot2)
library(blorr)
library(arm)
library(ggstatsplot)
# Plotting logit vs probit
p <- seq(0.001, 0.999, length.out = 500)
logit <- log(p / (1 - p))
probit <- qnorm(p)
df <- data.frame(
p = p,
logit = logit,
probit = probit
)
ggplot(df, aes(x = p)) +
geom_line(aes(y = logit, color = "Logit Link"), size = 1.2) +
geom_line(aes(y = probit, color = "Probit Link"), linetype = "dashed", size = 1.2) +
labs(x = "Probability (p)", y = "Transformed Value",
title = "Comparison of Logit and Probit Link Functions") +
theme_minimal() +
scale_color_manual(name = "Link Function", values = c("Logit Link" = "black", "Probit Link" = "gray"))
# Load data
library(DALEX)
data("titanic", package = "DALEX")
ship_survival <- subset(titanic, fare > 0 & age > 21 & fare < 300)
ship_survival$survived <- as.factor(ship_survival$survived)
# Quick look at the data
summary(ship_survival)
# Boxplot with jittered points
ggplot(ship_survival, aes(x = survived, y = fare)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 0.5, alpha = 0.5, color = "blue") +
coord_flip()
library(ggstatsplot)
ggbetweenstats(data = ship_survival, y = fare, x = survived,
results.subtitle = FALSE, centrality.plotting = FALSE,
point.args = list(size = 2))
model_logit <- glm(survived ~ fare,
family = binomial(link = "logit"),
data = ship_survival)
summary(model_logit)
cbind(Coefficient_logodds = coef(model_logit), confint(model_logit, level = 0.95))
cbind(Coefficient_Odds = exp(coef(model_logit)), exp(confint(model_logit)))
round((exp(coef(model_logit)[2]) - 1) * 100, 2)
predict(model_logit,
newdata = data.frame(fare = 50),
type = "response")
predict(model_logit,
newdata = data.frame(fare = 50),
type = "link")
exp(predict(model_logit,
newdata = data.frame(fare = 50),
type = "link"))
predict(model_logit,
newdata = data.frame(fare = 50),
type = "response")
ship_survival$modelled_logodds    <- predict(model_logit, type = "link")
ship_survival$modelled_odds       <- exp(predict(model_logit, type = "link"))
ship_survival$modelled_probability <- predict(model_logit, type = "response")
ship_survival$type_num <- ifelse(ship_survival$survived == "yes", 1, 0)
ggplot(ship_survival, aes(fare, type_num)) +
geom_point(alpha = 0.5, size = 0.5) +
stat_smooth(aes(y = modelled_probability), se = FALSE, lwd = 0.5) +
labs(y = "Probability of survival", title = "Probability of surviving Titanic based on fare paid")
ggplot(ship_survival, aes(x = fare, y = survived)) +
geom_point(aes(color = factor(survived))) +
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = FALSE, color = "blue") +
labs(y = "Probability of survival",
title = "Probability of surviving Titanic based on fare paid") +
scale_color_manual(values = c("0" = "darkred", "1" = "green"))
ship_survival
names(ship_survival)
summary(ship_survival)
ggplot(ship_survival, aes(x = fare, y = survived)) +
geom_point(aes(color = factor(survived))) +
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = FALSE, color = "blue") +
labs(y = "Probability of survival",
title = "Probability of surviving Titanic based on fare paid") +
scale_color_manual(values = c("no" = "darkred", "yes" = "green"))
ggplot(ship_survival, aes(x = fare, y = type_num)) +
geom_point(aes(color = factor(type_num))) +
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = FALSE, color = "blue") +
labs(y = "Probability of survival",
title = "Probability of surviving Titanic based on fare paid") +
scale_color_manual(values = c("no" = "darkred", "yes" = "green"))
gplot(ship_survival, aes(fare, type_num)) +
geom_point(alpha = 0.5, size = 0.5) +
stat_smooth(aes(y = modelled_probability), se = FALSE, lwd = 0.5) +
labs(y = "Probability of survival", title = "Probability of surviving Titanic based on fare paid")
ggplot(ship_survival, aes(fare, type_num)) +
geom_point(alpha = 0.5, size = 0.5) +
stat_smooth(aes(y = modelled_probability), se = FALSE, lwd = 0.5) +
labs(y = "Probability of survival", title = "Probability of surviving Titanic based on fare paid")
ggplot(ship_survival, aes(x = fare, y = type_num)) +
geom_point(aes(color = factor(type_num))) +
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = FALSE, color = "blue") +
labs(y = "Probability of survival",
title = "Probability of surviving Titanic based on fare paid") +
ship_survival$type_num <- ifelse(ship_survival$survived == "yes", 1, 0)
ship_survival$type_num <- ifelse(ship_survival$survived == "yes", 1, 0)
ggplot(ship_survival, aes(x = fare, y = type_num)) +
geom_point(aes(color = factor(type_num))) +
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = FALSE, color = "blue") +
labs(y = "Probability of survival",
title = "Probability of surviving Titanic based on fare paid") +
ggplot(ship_survival, aes(x = fare, y = as.numeric(survived == "yes"))) +
geom_point(aes(color = survived), alpha = 0.5) +
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = FALSE, color = "blue") +
labs(y = "Probability of survival",
title = "Probability of surviving Titanic based on fare paid",
color = "Survived") +
theme_minimal()
names(birth)
model1 <- glm(as.factor(low)~lwt, data=birth)
birth$low
birth$low <- as.factor(birth$low)
model1 <- glm(low~lwt,family = binomial(link = "logit"), data=birth)
model1
model2 <- glm(low~age,family = binomial(link = "logit"), data=birth)
aic(model1,model2)
AIC(model1,model2)
model1
model2
summary(model1)
summary(model2)
model3 <- glm(low~age+lwt,family = binomial(link = "logit"), data=birth)
model2
model3
summary(model3)
blorr::blr_step_p_both(model3)
names(birth)
model3 <- glm(low~.,family = binomial(link = "logit"), data=birth)
model3
summary(model3)
summary(birth)
install.packages("faraway")
library(faraway)
data(wages)
force(wages)
?faraway
??farawat
??faraway
??"faraway"
faraway::africa
?africa
data(phbirths)
force(phbirths)
?phbirths
# Load openintro
library(openintro)
# Student Survey dataset
data(StudentSurvey)
head(StudentSurvey)
data("ukdemo")
force(ukdemo)
data(student_survey)
student_survey
data(student_survey)
?student_survey
??
"student_survey"
data("gpa")
force(gpa)
lm(gpa~.,data=gpa)
summary(lm(gpa~.,data=gpa))
>gpa
?gpa
data(gala)
force(gala)
summary(lm(Species~.,data=gala))
olsrr::best summary(lm(Species~.,data=gala))
library(olsrr)
olsrr::ols_step_best_subset(lm(Species~.,data=gala))
olsrr::ols_step_best_subset(lm(gpa~.,data=gpa))
data("student_survey")
head(student_survey)
View(birth)
olsrr::ols_step_best_subset(lm(bwt~.,data=birth))
olsrr::ols_step_best_subset(lm(bwt~.-low,data=birth))
View(phbirths)
data(donors)
?donors
data(hsb2)
force(hsb2)
View(hsb2)
olsrr::ols_step_best_subset(lm(read~.,data=hsb2))
model3 <- glm(schtyp~.,family = binomial(link = "logit"), data=hsb2)
model2
model3
summary(model3)
data("swiss")
force(swiss)
names(swiss)
olsrr::ols_step_best_subset(lm(Fertility~.,data=swiss))
?swiss
lm(Fertility~Education+Infant.Mortality+Agriculture.,data=swiss)
View(swiss)
lm(Fertility~Education+Infant.Mortality+Agriculture,data=swiss)
summary(lm(Fertility~Education+Infant.Mortality+Agriculture,data=swiss)
)
model_new <- lm(fertility ~ Education+Infant.Mortality+Agriculture,
data=swiss)
model_new <- lm(Fertility ~ Education+Infant.Mortality+Agriculture,
data=swiss)
summary(model_new)
rubric <- readxl::read_excel("Table_Project2Rubric.xlsx")
knitr::kable(rubric) %>%
kable_classic_2() %>%
kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
library(kableExtra)
rubric <- readxl::read_excel("Table_Project2Rubric.xlsx")
knitr::kable(rubric) %>%
kable_classic_2() %>%
kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
rubric <- readxl::read_excel("Table_Project2Rubric.xlsx")
knitr::kable(rubric) %>%
kable_classic_2() %>%
kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
rubric <- readxl::read_excel("Table_Project2Rubric.xlsx")
print(rubric)
rubric <- readxl::read_excel("Table_Project2Rubric.xlsx")
print(rubric)
rubric <- readxl::read_excel("Table_Project2Rubric.xlsx")
print(rubric)
rmarkdown::render("in_project2_instructions.Rmd")
rmarkdown::render("in_project2_instructions.Rmd")
