ggplot(HousesNY, aes(x = Price, y = Beds, fill = Beds)) +
geom_density_ridges_gradient()
# OPTIONS -----------------------------------------------
knitr::opts_chunk$set(echo = TRUE,
warning=FALSE,
message = FALSE)
# PACKAGES-----------------------------------------------
# Tutorial packages
library(vembedr)
library(skimr)
library(yarrr)
library(RColorBrewer)
library(GGally)
library(tidyverse)
library(plotly)
library(readxl)
library(rvest)
library(biscale)
library(tidycensus)
library(cowplot)
library(units)
library(olsrr)
library(ggstatsplot)
library(ggplot2)
library(ggstatsplot)
library(ggplot2)
library(hrbrthemes)
library(ggExtra)
data("HousesNY", package = "Stat2Data")
HousesNY$Beds <- as.numeric(HousesNY$Beds)
data("HousesNY", package = "Stat2Data")
print(HousesNY)
HousesNY$Beds <- as.numeric(HousesNY$Beds)
names(HousesNY)
gghistostats( data = HousesNY,
x        = Price,
binwidth = 10,
xlab     = "Price (USD)",
title    = "Price of sampled houses in Canton NY",
caption  = "Source: Zillow",
results.subtitle = FALSE)
ggplot(HousesNY, aes(x = Price)) +
geom_histogram(bins = 20) +
labs(x = "House Price (USD)")
ggplot(HousesNY, aes(x = Price)) +
geom_histogram(bins = 15, color="navy",fill  = "steelblue") +
labs(x = "House Price (USD)",
y = "Number of Houses",
title = "Add your title",
subtitle = "And/or add your subtitle",) +
scale_x_continuous(labels = scales::dollar_format()) +
theme_light(base_size = 12)
myplot <- ggplot(HousesNY, aes(x = Price)) +
geom_histogram(binwidth = 10) +
labs(x = "House Price (USD)", y = "Count") # I could just add the theme here,
plota <- myplot + ggtitle("theme_few example")   + theme_few()
plotb <- myplot + ggtitle("theme_tufte example") + theme_tufte()
plotc <- myplot + ggtitle("theme_ipsum example") + theme_ipsum()
plotd <- myplot + ggtitle("theme_wsj example")   + theme_wsj()
ggarrange(plota, plotb, plotc, plotd, ncol = 2, nrow = 2)
ggplot(HousesNY, aes(x = Price, y = Beds, fill = Beds)) +
geom_density_ridges_gradient()
ggplot(HousesNY, aes(x = Price, y = Beds, fill = Beds)) +
geom_density_ridges(scale = 4, stat = "density")
ggplot(HousesNY, aes(x = Price, y = Beds, fill = Beds,height = after_stat(density))) +
geom_density_ridges(scale = 4, stat = "density")
HousesNY$Beds <- as.factor(HousesNY$Beds)
ggplot(HousesNY, aes(x = Price,
y = Beds,
fill = Beds,
height = after_stat(density))) +
geom_density_ridges(scale = 4, stat = "density")
ggplot(HousesNY, aes(x = Price,
y = Beds,
fill = Beds) +
geom_density_ridges()
ggplot(HousesNY, aes(x = Price,  y = Beds,fill = Beds) )+
geom_density_ridges()
ggbetweenstats(data=HousesNY,
x=Beds,
y=Price,
results.subtitle=FALSE)
?ggbetweenstats
ggbetweenstats(data=HousesNY,
x=Beds,
y=Price,
results.subtitle=FALSE,
centrality.point.args = list(size = 3, color = "darkblue"),
)
ggbetweenstats(data=HousesNY,
x=Beds,
y=Price,
type="nonparametric",
results.subtitle=FALSE,
centrality.point.args = list(size = 3, color = "darkblue"),
)
HousesNY
ggbetweenstats(data=HousesNY,
x=Baths,
y=Price,
type="nonparametric",
results.subtitle=FALSE,
centrality.point.args = list(size = 3, color = "darkblue"),
)
ggbetweenstats(data=HousesNY,
x=Baths,
y=Price,
type="nonparametric",
results.subtitle=FALSE,
centrality.point.args = list(size = 3, color = "darkblue"),
bf.message = FALSE)
# modifying defaults
ggbetweenstats(
morley,
x    = Expt,
y    = Speed,
type = "robust",
xlab = "The experiment number",
ylab = "Speed-of-light measurement"
)
# modifying defaults
ggbetweenstats(
morley,
x    = Expt,
y    = Speed,
type = "robust",
xlab = "The experiment number",
ylab = "Speed-of-light measurement",
results.subtitle=FALSE,
centrality.point.args = list(size = 3, color = "darkblue"),
bf.message = FALSE)
# modifying defaults
ggbetweenstats(
morley,
x    = Expt,
y    = Speed,
type = "robust",
xlab = "The experiment number",
ylab = "Speed-of-light measurement",
results.subtitle=FALSE,
centrality.point.args = list(size = 3, color = "darkblue"),
bf.message = FALSE)
# modifying defaults
ggbetweenstats(
morley,
x    = Expt,
y    = Speed,
type = "robust",
xlab = "The experiment number",
ylab = "Speed-of-light measurement",
results.subtitle=TRUE,
centrality.point.args = list(size = 3, color = "darkblue"),
bf.message = FALSE)
# modifying defaults
ggbetweenstats(
morley,
x    = Expt,
y    = Speed,
type = "robust",
xlab = "The experiment number",
ylab = "Speed-of-light measurement",
pairwise.display="significant",
results.subtitle=FALSE,
centrality.point.args = list(size = 3, color = "darkblue"),
bf.message = FALSE)
# modifying defaults
ggbetweenstats(
morley,
x    = Expt,
y    = Speed,
xlab = "Experiment number",
ylab = "Speed-of-light measurement",
pairwise.display="significant",
results.subtitle=FALSE,
centrality.point.args = list(size = 3, color = "darkblue"),
bf.message = FALSE)
myplot <- ggplot(HousesNY, aes(x = Price)) +
geom_histogram(binwidth = 10) +
labs(x = "House Price (USD)", y = "Count") # I could just add the theme here,
plota <- myplot + theme_few()
plotb <- myplot + theme_tufte()
plotc <- myplot + theme_ipsum()
plotd <- myplot + theme_wsj()
# and I can use ggarrange to plot sub-plots
ggarrange(plota, plotb, plotc, plotd, ncol = 2, nrow = 2)
ggplot(HousesNY, aes(x = Price, y = Beds, fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_c(name = "Depth", option = "C") +
coord_cartesian(clip = "off") + # To avoid cut off
theme_minimal()
ggplot(HousesNY, aes(x = Price, y = Beds, fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_c(name = "Price", option = "C") +
coord_cartesian(clip = "off") + # To avoid cut off
theme_minimal()
# modifying defaults
ggbetweenstats(
morley,
x    = Expt,
y    = Speed,
xlab = "Experiment number",
ylab = "Speed-of-light measurement",
pairwise.display="significant",
results.subtitle=FALSE,
centrality.point.args = list(size = 3, color = "darkblue"),
bf.message = FALSE)
ggplot(HousesNY, aes(x ="", y = Price)) +    ## this loads the data
geom_boxplot()                            ## and we choose a boxplot
ggplot(HousesNY, aes(x =Beds, y = Price)) +    ## this loads the data
geom_boxplot()                            ## and we choose a boxplot
# Basic box plot
ggplot(HousesNY, aes(x = beds, y = Price)) +
geom_boxplot() +
geom_jitter() +
theme_minimal()
# Basic box plot
ggplot(HousesNY, aes(x = Beds, y = Price)) +
geom_boxplot() +
geom_jitter() +
theme_minimal()
ggplot(HousesNY, aes(x =Beds, y = Price)) +    ## this loads the data
geom_boxplot()  +
theme_minimal()
ggbetweenstats(
morley,
x    = Expt,
y    = Speed,
xlab = "Experiment number",
ylab = "Speed-of-light measurement",
pairwise.display="significant",
results.subtitle=FALSE,
violin.args = list(width = 0, linewidth = 0),
centrality.point.args = list(size = 3, color = "darkblue"),
bf.message = FALSE)
ggbetweenstats(
morley,
x    = Expt,
y    = Speed,
xlab = "Experiment number",
ylab = "Speed-of-light measurement",
pairwise.display="significant",
results.subtitle=FALSE,
violin.args = list(width = 0, linewidth = 0),
centrality.point = FALSE,
bf.message = FALSE)
ggbetweenstats(
morley,
x    = Expt,
y    = Speed,
xlab = "Experiment number",
ylab = "Speed-of-light measurement",
pairwise.display="significant",
results.subtitle=FALSE,
violin.args = list(width = 0, linewidth = 0),
centrality.plotting = FALSE,
bf.message = FALSE)
ggbetweenstats(data = HousesNY,
x    = Beds,
y    = Price,
xlab = "Number of bedrooms",
ylab = "House Price",
pairwise.display="significant",
results.subtitle=FALSE,
violin.args = list(width = 0, linewidth = 0),
centrality.plotting = FALSE,
bf.message = FALSE)
# Normally this goes in your library code chunk
library(ggplot2)
# ggplot (TABLENAME, aes(x=XCOLUMN_NAME, y=YCOLUMN_NAME)
ggplot(HousesNY, aes(x=Beds, y=Price)) +
geom_point() +
ggtitle("Price of New York Homes by bedroom size") +
xlab("Beds") + ylab("Price (1000 USD)")
ggplot(HousesNY, aes(x=Beds, y=Price)) +
geom_point() +
ggtitle("Price of New York Homes by bedroom size") +
xlab("Beds") + ylab("Price (1000 USD)")
ggplot(HousesNY, aes(x=Size, y=Price)) +
geom_point() +
ggtitle("Size vs Price of New York Homes") +
xlab("Size (sq ft)") + ylab("Price (1000 USD)")
ggplot(HousesNY, aes(x=Size, y=Price)) +
geom_point() +
ggtitle("Size vs Price of New York Homes") +
xlab("Size (sq ft)") + ylab("Price (1000 USD)") +
theme_light() +
geom_smooth("lm")
ggplot(HousesNY, aes(x=Size, y=Price)) +
geom_point() +
ggtitle("Size vs Price of New York Homes") +
xlab("Size (sq ft)") + ylab("Price (1000 USD)") +
theme_light() +
geom_smooth(method=lm , color="red", se=FALSE)
ggplot(HousesNY, aes(x=Size, y=Price)) +
geom_point() +
ggtitle("Size vs Price of New York Homes") +
ggsubtitle("Canton, NY")_+
ggplot(HousesNY, aes(x=Size, y=Price)) +
geom_point() +
ggtitle("Size vs Price of New York Homes") +
ggsubtitle("Canton, NY") +
xlab("Size (sq ft)") + ylab("Price (1000 USD)") +
theme_light() +
geom_smooth(method=lm , color="red", se=FALSE)
ggplot(HousesNY, aes(x=Size, y=Price)) +
geom_point() +
geom_smooth(method=lm , color="red", se=FALSE) +
ggtitle("Size vs Price of New York Homes") +
xlab("Size (sq ft)") + ylab("Price (1000 USD)") +
theme_light() +
ggplot(HousesNY, aes(x=Size, y=Price)) +
geom_point() +
geom_smooth(method=lm , color="red", se=FALSE) +
ggtitle("Size vs Price of New York Homes") +
xlab("Size (sq ft)") + ylab("Price (1000 USD)") +
theme_light()
?geom_smooth
ggplot(HousesNY, aes(x=Size, y=Price)) +
geom_point() +
geom_smooth(method=lm , color="red", se=TRUE, level = 0.95) +
ggtitle("Size vs Price of New York Homes") +
xlab("Size (sq ft)") + ylab("Price (1000 USD)") +
theme_light()
# Add linear trend + confidence interval
ggplot(HousesNY, aes(x=Beds, y=Price)) +
geom_point() +
ggtitle("Price of New York Homes by bedroom size") +
xlab("Beds") + ylab("Price (1000 USD)")+
geom_smooth(method=lm , color="blue", fill="#69b3a2", se=TRUE) +
theme_ipsum()
# Add linear trend + confidence interval
ggplot(HousesNY, aes(x=Beds, y=Price)) +
geom_point() +
ggtitle("Price of New York Homes by bedroom size") +
xlab("Beds") + ylab("Price (1000 USD)")+
geom_smooth(method=lm , color="blue", fill="#69b3a2", se=TRUE) +
theme_ipsum()
# create the plot, save it as a variable rather than print immediately
myplot <-   ggplot(HousesNY, aes(x=Beds, y=Price)) +
geom_point() +
geom_smooth(method=lm , color="red", se=FALSE) +
ggtitle("Price of New York Homes by bedroom size") +
xlab("Beds") + ylab("Price (1000 USD)")
# and plot interactively
ggplotly(myplot)
# create the plot, save it as "p" rather than print immediately
myplot <-   ggplot(HousesNY, aes(x=Beds, y=Price,color=Lot)) +
geom_point(alpha=.5) +
scale_color_gradient(low="blue", high="red")+
ggtitle("New York Homes price by bedrooms and lot size (acres)") +
xlab("Beds") +
ylab("Price (1000 USD)")
# and plot interactively
ggplotly(myplot)
# create the plot, save it as "p" rather than print immediately
myplot <-   ggplot(HousesNY, aes(x=Beds, y=Price,color=Size)) +
geom_point(alpha=.5) +
scale_color_gradient(low="blue", high="red")+
ggtitle("New York Homes price by bedrooms and lot size (acres)") +
xlab("Beds") +
ylab("Price (1000 USD)")
# and plot interactively
ggplotly(myplot)
# create the plot, save it as "p" rather than print immediately
myplot <-   ggplot(HousesNY, aes(x=Beds, y=Price,color=Size)) +
geom_point() +
ggtitle("New York Homes price by bedrooms and lot size (acres)") +
xlab("Beds") +
ylab("Price (1000 USD)")
# and plot interactively
ggplotly(myplot)
# create the plot, save it as "p" rather than print immediately
myplot <-   ggplot(HousesNY, aes(x=Beds, y=Price,color=Size)) +
geom_point() +
scale_color_gradient(low="blue", high="red")+
ggtitle("New York Homes price by bedrooms and lot size (acres)") +
xlab("Beds") +
ylab("Price (1000 USD)")
# and plot interactively
ggplotly(myplot)
# Libraries
library(tidyverse)
library(hrbrthemes)
library(viridis)
# tell R that the beds column is categorical
HousesNY$Beds <- factor(HousesNY$Beds,
levels=c(min(HousesNY$Beds):max(HousesNY$Beds)))
# Libraries
library(tidyverse)
library(hrbrthemes)
library(viridis)
# tell R that the beds column is categorical
# I already did this in the table section
#HousesNY$Beds <- as.factor(HousesNY$Beds)
# Plot
HousesNY %>%
ggplot( aes(x=Beds, y=Price, fill=Beds) )+
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.5, alpha=0.8) +
ggtitle("") +
xlab("Beds")
HousesNY %>%
ggplot( aes(x=Beds, y=Price, fill=Beds) )+
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.5, alpha=0.8) +
ggtitle("") +
xlab("Beds")
library(RColorBrewer)
# create colours and colour matrix (for points)
m     <- as.matrix(HousesNY$Price)
col_main   <- colorRampPalette(brewer.pal(12, "Set3"), alpha=TRUE)(ncol(m))
col_transp <- colorspace::adjust_transparency(col_main, alpha = .3)
colsm   <-matrix(rep(col_main, each=nrow(m)), ncol=ncol(m))
colsm_tr <-matrix(rep(col_transp, each=nrow(m)), ncol=ncol(m))
# create some random data for jitter
r <-  (matrix(runif(nrow(m)*ncol(m)), nrow=nrow(m), ncol=ncol(m)) / 2) - 0.25
# get the greys (stolen from https://github.com/zonination/perceptions/blob/master/percept.R)
palette <- brewer.pal("Greys", n=9)
color.background = palette[2]
color.grid.major = palette[5]
# set graphical area
par(bty="n", bg=palette[2], mar=c(5,8,3,1))
# plot initial boxplot
boxplot(m~col(m), horizontal=TRUE, outline=FALSE, lty=1,
staplewex=0, boxwex=0.8, boxlwd=1, medlwd=1,
col=colsm_tr, xaxt="n", yaxt="n",xlab="",ylab="")
# plot gridlines
for (i in pretty(m,10)) {
lines(c(i,i), c(0,20), col=palette[4])
}
# plot points
points(m, col(m)+r, col=colsm, pch=16)
# overlay boxplot
boxplot(m~col(m), horizontal=TRUE, outline=FALSE, lty=1,
staplewex=0, boxwex=0.8, boxlwd=1, medlwd=1, col=colsm_tr,
add=TRUE, xaxt="n", yaxt="n")
# add axes and title
axis(side=1, at=pretty(m,10), col.axis=palette[7],
cex.axis=0.8, lty=0, tick=NA, line=-1)
axis(side=1, at=50, labels="Price (Thousand USD)",
lty=0, tick=NA, col.axis=palette[7])
axis(side=2, at=1, col.axis=palette[7], cex.axis=0.8,
lty=0, tick=NA, labels="Sample 1", las=2)
axis(side=2, at=17/2, labels="Phrase", col.axis=palette[7],
lty=0, tick=NA, las=3, line=6)
title("House Prices in Canton NY")
library(RColorBrewer)
# create colours and colour matrix (for points)
m     <- as.matrix(HousesNY$Price)
col_main   <- colorRampPalette(brewer.pal(12, "Set3"), alpha=TRUE)(ncol(m))
col_transp <- colorspace::adjust_transparency(col_main, alpha = .3)
colsm   <-matrix(rep(col_main, each=nrow(m)), ncol=ncol(m))
colsm_tr <-matrix(rep(col_transp, each=nrow(m)), ncol=ncol(m))
# create some random data for jitter
r <-  (matrix(runif(nrow(m)*ncol(m)), nrow=nrow(m), ncol=ncol(m)) / 2) - 0.25
# get the greys (stolen from https://github.com/zonination/perceptions/blob/master/percept.R)
palette <- brewer.pal("Greys", n=9)
color.background = palette[2]
color.grid.major = palette[5]
# set graphical area
par(bty="n", bg=palette[2], mar=c(5,8,3,1))
# plot initial boxplot
boxplot(m~col(m), horizontal=TRUE, outline=FALSE, lty=1,
staplewex=0, boxwex=0.8, boxlwd=1, medlwd=1,
col=colsm_tr, xaxt="n", yaxt="n",xlab="",ylab="")
# plot gridlines
for (i in pretty(m,10)) {
lines(c(i,i), c(0,20), col=palette[4])
}
# plot points
points(m, col(m)+r, col=colsm, pch=16)
# overlay boxplot
boxplot(m~col(m), horizontal=TRUE, outline=FALSE, lty=1,
staplewex=0, boxwex=0.8, boxlwd=1, medlwd=1, col=colsm_tr,
add=TRUE, xaxt="n", yaxt="n")
# add axes and title
axis(side=1, at=pretty(m,10), col.axis=palette[7],
cex.axis=0.8, lty=0, tick=NA, line=-1)
axis(side=1, at=50, labels="Price (Thousand USD)",
lty=0, tick=NA, col.axis=palette[7])
axis(side=2, at=1, col.axis=palette[7], cex.axis=0.8,
lty=0, tick=NA, labels="Sample 1", las=2)
axis(side=2, at=17/2, labels="Phrase", col.axis=palette[7],
lty=0, tick=NA, las=3, line=6)
title("House Prices in Canton NY")
ggplot(HousesNY,  aes(x=Beds, y=Price, fill=Beds)) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.5,binwidth=7)
ggplot(HousesNY,  aes(x=Beds, y=Price, fill=Beds)) +
geom_boxplot() +
geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.5,binwidth=7)
# fill=name allow to automatically dedicate a color for each group
ggplot(HousesNY, aes(x=Beds, y=Price, fill=Beds)) +
geom_violin()
ggplot(HousesNY, aes(x=Beds, y=Price, fill=Beds)) +
geom_violin()
# modifying defaults
ggbetweenstats(
morley,
x    = Expt,
y    = Speed,
xlab = "Experiment number",
ylab = "Speed-of-light measurement",
pairwise.display="significant",
results.subtitle=FALSE,
centrality.point.args = list(size = 3, color = "darkblue"),
bf.message = FALSE)
?theme_few
names(HousesNY)
HousesNY$Beds <- as.factor(HousesNY$Beds)
